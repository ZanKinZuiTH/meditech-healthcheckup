import streamlit as st
import pandas as pd
import plotly.express as px
from datetime import datetime, timedelta
from database import Database, Gender, AppointmentType, AppointmentStatus
import random

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
st.set_page_config(
    page_title="MediTech Demo",
    page_icon="ÔøΩÔøΩ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# ‡∏™‡∏£‡πâ‡∏≤‡∏á session state
if 'use_real_db' not in st.session_state:
    st.session_state.use_real_db = False
if 'dark_mode' not in st.session_state:
    st.session_state.dark_mode = False
if 'font_size' not in st.session_state:
    st.session_state.font_size = 16

# ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
@st.cache_resource
def get_database():
    return Database(use_real_db=st.session_state.use_real_db)

db = get_database()

# Sidebar
with st.sidebar:
    st.title("üè• MediTech")
    
    # ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
    st.header("‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤")
    db_mode = st.selectbox(
        "‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
        ["Demo Mode", "Production Mode"],
        index=0
    )
    
    st.session_state.dark_mode = st.toggle("‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô", st.session_state.dark_mode)
    st.session_state.font_size = st.slider("‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£", 12, 24, st.session_state.font_size)
    
    # ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å
    st.header("üìã ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å")
    demo_section = st.radio(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≤‡∏ò‡∏¥‡∏ï",
        ["Dashboard", "AI Diagnosis", "Patient Management", "Appointments", "Reports"]
    )

# ‡∏õ‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
if db_mode == "Production Mode" and not st.session_state.use_real_db:
    st.session_state.use_real_db = True
    st.experimental_rerun()
elif db_mode == "Demo Mode" and st.session_state.use_real_db:
    st.session_state.use_real_db = False
    st.experimental_rerun()

# ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ï‡∏≤‡∏°‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
if demo_section == "Dashboard":
    st.header("üìä Dashboard")
    
    # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "1,234", "+12")
    with col2:
        st.metric("‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ", "45", "+5")
    with col3:
        st.metric("‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£", "12", "-3")
    with col4:
        st.metric("‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ", "‡∏ø123,456", "+15.2%")
    
    # ‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
    col1, col2 = st.columns(2)
    with col1:
        st.subheader("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô")
        monthly_data = pd.DataFrame({
            "‡πÄ‡∏î‡∏∑‡∏≠‡∏ô": pd.date_range(start="2024-01-01", periods=6, freq="M"),
            "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô": [120, 150, 140, 160, 180, 200]
        })
        fig = px.line(monthly_data, x="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", y="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô")
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        st.subheader("‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à")
        exam_data = pd.DataFrame({
            "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó": ["‡∏ï‡∏£‡∏ß‡∏à‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ", "‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏≤‡∏á", "‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏•", "‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô"],
            "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô": [45, 25, 20, 10]
        })
        fig = px.pie(exam_data, values="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô", names="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó")
        st.plotly_chart(fig, use_container_width=True)
    
    # ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
    st.subheader("üìÖ ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ")
    appointments = db.get_appointments(datetime.now().date())
    if appointments:
        appointments_df = pd.DataFrame([
            {
                "‡πÄ‡∏ß‡∏•‡∏≤": "10:00",
                "‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢": "‡∏ô‡∏≤‡∏¢‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ",
                "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó": a.type.value,
                "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞": a.status.value
            }
            for a in appointments
        ])
        st.dataframe(appointments_df, use_container_width=True)
    else:
        st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ")

elif demo_section == "AI Diagnosis":
    st.title("ü§ñ AI Diagnosis System")
    
    # ‡πÅ‡∏ö‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÄ‡∏õ‡πá‡∏ô 2 ‡∏™‡πà‡∏ß‡∏ô
    input_col, result_col = st.columns([1, 1])
    
    with input_col:
        st.subheader("‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏Å‡∏≤‡∏£")
        
        # ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        symptoms = st.text_area(
            "‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏û‡∏ö",
            placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏û‡∏ö ‡πÅ‡∏¢‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢ ,",
            help="‡πÄ‡∏ä‡πà‡∏ô: ‡πÑ‡∏Ç‡πâ, ‡∏õ‡∏ß‡∏î‡∏´‡∏±‡∏ß, ‡πÑ‡∏≠"
        )
        
        col1, col2 = st.columns(2)
        with col1:
            age = st.number_input("‡∏≠‡∏≤‡∏¢‡∏∏", 0, 150, 25)
        with col2:
            gender = st.selectbox("‡πÄ‡∏û‡∏®", ["‡∏ä‡∏≤‡∏¢", "‡∏´‡∏ç‡∏¥‡∏á", "‡∏≠‡∏∑‡πà‡∏ô‡πÜ"])
        
        duration = st.slider("‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£ (‡∏ß‡∏±‡∏ô)", 0, 30, 1)
        
        medical_history = st.text_area(
            "‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)",
            placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á"
        )
        
        if st.button("‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢", type="primary"):
            with result_col:
                st.subheader("‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô")
                
                # ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
                with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå..."):
                    st.progress(100)
                    
                    # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢
                    st.write("### ‡πÇ‡∏£‡∏Ñ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ:")
                    conditions = [
                        "‡πÑ‡∏Ç‡πâ‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ (Common Cold)",
                        "‡πÑ‡∏Ç‡πâ‡∏´‡∏ß‡∏±‡∏î‡πÉ‡∏´‡∏ç‡πà (Influenza)",
                        "‡∏†‡∏π‡∏°‡∏¥‡πÅ‡∏û‡πâ (Allergic Rhinitis)"
                    ]
                    for c in conditions:
                        st.write(f"- {c}")
                    
                    st.write("### ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô:")
                    st.progress(85)
                    st.write("85%")
                    
                    st.write("### ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:")
                    st.info("""
                    1. ‡∏Ñ‡∏ß‡∏£‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠
                    2. ‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥‡∏°‡∏≤‡∏Å‡πÜ
                    3. ‡∏´‡∏≤‡∏Å‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 3 ‡∏ß‡∏±‡∏ô ‡∏Ñ‡∏ß‡∏£‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå
                    """)
                    
                    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ñ‡πâ‡∏≤‡∏û‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢
                    if "‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡∏•‡∏≥‡∏ö‡∏≤‡∏Å" in symptoms:
                        st.error("""
                        ‚ö†Ô∏è ‡∏û‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢:
                        ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡∏•‡∏≥‡∏ö‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢ ‡∏Ñ‡∏ß‡∏£‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÇ‡∏î‡∏¢‡∏î‡πà‡∏ß‡∏ô
                        """)
    
    # ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á
    st.warning("""
    ‚ö†Ô∏è ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢‡πÇ‡∏î‡∏¢‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÑ‡∏î‡πâ
    ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÇ‡∏î‡∏¢‡∏î‡πà‡∏ß‡∏ô
    """)

elif demo_section == "Patient Management":
    st.header("üë§ ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢")
    
    col1, col2 = st.columns(2)
    with col1:
        st.subheader("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢")
        search = st.text_input("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏´‡∏±‡∏™‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠")
        patients = db.get_patients(search)
        if patients:
            patients_df = pd.DataFrame([
                {
                    "‡∏£‡∏´‡∏±‡∏™": p.id,
                    "‡∏ä‡∏∑‡πà‡∏≠": p.name,
                    "‡∏≠‡∏≤‡∏¢‡∏∏": p.age,
                    "‡πÄ‡∏û‡∏®": p.gender.value,
                    "‡πÇ‡∏£‡∏Ñ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß": p.conditions
                }
                for p in patients
            ])
            st.dataframe(patients_df)
        else:
            st.info("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢")
    
    with col2:
        st.subheader("‡πÄ‡∏û‡∏¥‡πà‡∏°/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        patient_id = st.text_input("‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢", "P0000")
        name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•")
        age = st.number_input("‡∏≠‡∏≤‡∏¢‡∏∏", 0, 120, 25)
        gender = st.selectbox("‡πÄ‡∏û‡∏®", ["‡∏ä‡∏≤‡∏¢", "‡∏´‡∏ç‡∏¥‡∏á"])
        conditions = st.multiselect(
            "‡πÇ‡∏£‡∏Ñ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß",
            ["‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô", "‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô", "‡πÑ‡∏Ç‡∏°‡∏±‡∏ô", "‡∏´‡∏±‡∏ß‡πÉ‡∏à"]
        )
        
        if st.button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å"):
            try:
                db.add_patient(
                    id=patient_id,
                    name=name,
                    age=age,
                    gender=gender,
                    conditions=", ".join(conditions)
                )
                st.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            except Exception as e:
                st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")

elif demo_section == "Appointments":
    st.header("üìÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢")
    
    col1, col2 = st.columns(2)
    with col1:
        st.subheader("‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢")
        appointments = db.get_appointments()
        if appointments:
            appointments_df = pd.DataFrame([
                {
                    "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà": a.date,
                    "‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏ô‡πÑ‡∏Ç‡πâ": a.patient_id,
                    "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó": a.type.value,
                    "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞": a.status.value
                }
                for a in appointments
            ])
            st.dataframe(appointments_df)
        else:
            st.info("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢")
    
    with col2:
        st.subheader("‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß‡∏ï‡∏£‡∏ß‡∏à")
        appointment_date = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢")
        patients = db.get_patients()
        patient_options = {p.name: p.id for p in patients}
        patient_name = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢", list(patient_options.keys()))
        appointment_type = st.selectbox(
            "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à",
            ["‡∏ï‡∏£‡∏ß‡∏à‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ", "‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏≤‡∏á", "‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏•", "‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô"]
        )
        
        if st.button("‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß"):
            try:
                db.add_appointment(
                    date=appointment_date,
                    patient_id=patient_options[patient_name],
                    type=appointment_type
                )
                st.success("‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            except Exception as e:
                st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")

elif demo_section == "Reports":
    st.header("üìä ‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô")
    
    tab1, tab2, tab3 = st.tabs(["‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢", "‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢", "‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à"])
    
    with tab1:
        patients = db.get_patients()
        if patients:
            patients_df = pd.DataFrame([
                {
                    "‡πÄ‡∏û‡∏®": p.gender.value,
                    "‡πÇ‡∏£‡∏Ñ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß": p.conditions
                }
                for p in patients
            ])
            
            col1, col2 = st.columns(2)
            with col1:
                st.subheader("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ï‡∏≤‡∏°‡πÄ‡∏û‡∏®")
                fig = px.pie(
                    patients_df,
                    names="‡πÄ‡∏û‡∏®",
                    title="‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ï‡∏≤‡∏°‡πÄ‡∏û‡∏®"
                )
                st.plotly_chart(fig)
            
            with col2:
                st.subheader("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ï‡∏≤‡∏°‡πÇ‡∏£‡∏Ñ")
                disease_counts = pd.Series([
                    disease.strip()
                    for conditions in patients_df["‡πÇ‡∏£‡∏Ñ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß"]
                    for disease in conditions.split(",")
                    if disease.strip()
                ]).value_counts()
                
                fig = px.bar(
                    disease_counts,
                    title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ï‡∏≤‡∏°‡πÇ‡∏£‡∏Ñ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß"
                )
                st.plotly_chart(fig)
        else:
            st.info("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢")
    
    with tab2:
        appointments = db.get_appointments()
        if appointments:
            appointments_df = pd.DataFrame([
                {
                    "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó": a.type.value,
                    "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞": a.status.value
                }
                for a in appointments
            ])
            
            st.subheader("‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢")
            fig = px.histogram(
                appointments_df,
                x="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó",
                color="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞",
                title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"
            )
            st.plotly_chart(fig)
        else:
            st.info("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢")
    
    with tab3:
        records = db.get_health_records()
        if records:
            records_df = pd.DataFrame([
                {
                    "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà": r.date,
                    "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô": r.blood_pressure,
                    "‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•": r.blood_sugar,
                    "‡∏Ñ‡∏≠‡πÄ‡∏•‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡∏≠‡∏•": r.cholesterol
                }
                for r in records
            ])
            
            st.subheader("‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à")
            fig = px.line(
                records_df,
                x="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà",
                y=["‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô", "‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•", "‡∏Ñ‡∏≠‡πÄ‡∏•‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡∏≠‡∏•"],
                title="‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Ñ‡πà‡∏≤‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°"
            )
            st.plotly_chart(fig)
        else:
            st.info("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à")

# ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö
st.sidebar.markdown("---")
st.sidebar.subheader("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö")
col1, col2, col3 = st.sidebar.columns(3)

patients = db.get_patients()
appointments = db.get_appointments()
pending_appointments = [a for a in appointments if a.status == AppointmentStatus.PENDING]

col1.metric("‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", len(patients))
col2.metric(
    "‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ",
    len([a for a in appointments if a.date == datetime.now().date()])
)
col3.metric("‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£", len(pending_appointments)) 