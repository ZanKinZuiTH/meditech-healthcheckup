import streamlit as st
import pandas as pd
import plotly.express as px
from datetime import datetime
from database import Database, Gender, AppointmentType, AppointmentStatus

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
st.set_page_config(
    page_title="MediTech Demo",
    page_icon="ÔøΩÔøΩ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# ‡∏™‡∏£‡πâ‡∏≤‡∏á session state
if 'use_real_db' not in st.session_state:
    st.session_state.use_real_db = False
if 'dark_mode' not in st.session_state:
    st.session_state.dark_mode = False
if 'font_size' not in st.session_state:
    st.session_state.font_size = 16

# ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
@st.cache_resource
def get_database():
    return Database(use_real_db=st.session_state.use_real_db)

db = get_database()

# Sidebar
with st.sidebar:
    st.title("üè• MediTech")
    
    # ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
    st.header("‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤")
    db_mode = st.radio(
        "‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
        ["‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á", "‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á"]
    )
    
    st.session_state.dark_mode = st.toggle("‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô", st.session_state.dark_mode)
    st.session_state.font_size = st.slider("‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£", 12, 24, st.session_state.font_size)
    
    # ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å
    st.header("üìã ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å")
    menu = st.radio(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≤‡∏ò‡∏¥‡∏ï",
        ["‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î", "‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢", "‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢", "‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à", "‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô", "‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö"]
    )

# ‡∏õ‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
if db_mode == "‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á" and not st.session_state.use_real_db:
    st.session_state.use_real_db = True
    st.experimental_rerun()
elif db_mode == "‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á" and st.session_state.use_real_db:
    st.session_state.use_real_db = False
    st.experimental_rerun()

# ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ï‡∏≤‡∏°‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
if menu == "‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î":
    st.header("üìä ‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î")
    
    # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "1,234", "+12")
    with col2:
        st.metric("‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ", "45", "+5")
    with col3:
        st.metric("‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£", "12", "-3")
    with col4:
        st.metric("‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ", "‡∏ø123,456", "+15.2%")
    
    # ‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
    col1, col2 = st.columns(2)
    with col1:
        st.subheader("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô")
        monthly_data = pd.DataFrame({
            "‡πÄ‡∏î‡∏∑‡∏≠‡∏ô": pd.date_range(start="2024-01-01", periods=6, freq="M"),
            "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô": [120, 150, 140, 160, 180, 200]
        })
        fig = px.line(monthly_data, x="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", y="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô")
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        st.subheader("‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à")
        exam_data = pd.DataFrame({
            "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó": ["‡∏ï‡∏£‡∏ß‡∏à‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ", "‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏≤‡∏á", "‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏•", "‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô"],
            "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô": [45, 25, 20, 10]
        })
        fig = px.pie(exam_data, values="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô", names="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó")
        st.plotly_chart(fig, use_container_width=True)
    
    # ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
    st.subheader("üìÖ ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ")
    appointments = db.get_appointments(datetime.now().date())
    if appointments:
        appointments_df = pd.DataFrame([
            {
                "‡πÄ‡∏ß‡∏•‡∏≤": "10:00",
                "‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢": "‡∏ô‡∏≤‡∏¢‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ",
                "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó": a.type.value,
                "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞": a.status.value
            }
            for a in appointments
        ])
        st.dataframe(appointments_df, use_container_width=True)
    else:
        st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ")

elif menu == "‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢":
    st.header("üë§ ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢")
    
    col1, col2 = st.columns(2)
    with col1:
        st.subheader("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢")
        search = st.text_input("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏´‡∏±‡∏™‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠")
        patients = db.get_patients(search)
        if patients:
            patients_df = pd.DataFrame([
                {
                    "‡∏£‡∏´‡∏±‡∏™": p.id,
                    "‡∏ä‡∏∑‡πà‡∏≠": p.name,
                    "‡∏≠‡∏≤‡∏¢‡∏∏": p.age,
                    "‡πÄ‡∏û‡∏®": p.gender.value,
                    "‡πÇ‡∏£‡∏Ñ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß": p.conditions
                }
                for p in patients
            ])
            st.dataframe(patients_df)
        else:
            st.info("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢")
    
    with col2:
        st.subheader("‡πÄ‡∏û‡∏¥‡πà‡∏°/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        patient_id = st.text_input("‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢", "P0000")
        name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•")
        age = st.number_input("‡∏≠‡∏≤‡∏¢‡∏∏", 0, 120, 25)
        gender = st.selectbox("‡πÄ‡∏û‡∏®", ["‡∏ä‡∏≤‡∏¢", "‡∏´‡∏ç‡∏¥‡∏á"])
        conditions = st.multiselect(
            "‡πÇ‡∏£‡∏Ñ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß",
            ["‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô", "‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô", "‡πÑ‡∏Ç‡∏°‡∏±‡∏ô", "‡∏´‡∏±‡∏ß‡πÉ‡∏à"]
        )
        
        if st.button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å"):
            try:
                db.add_patient(
                    id=patient_id,
                    name=name,
                    age=age,
                    gender=gender,
                    conditions=", ".join(conditions)
                )
                st.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            except Exception as e:
                st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")

elif menu == "‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢":
    st.header("üìÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢")
    
    col1, col2 = st.columns(2)
    with col1:
        st.subheader("‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢")
        appointments = db.get_appointments()
        if appointments:
            appointments_df = pd.DataFrame([
                {
                    "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà": a.date,
                    "‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏ô‡πÑ‡∏Ç‡πâ": a.patient_id,
                    "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó": a.type.value,
                    "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞": a.status.value
                }
                for a in appointments
            ])
            st.dataframe(appointments_df)
        else:
            st.info("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢")
    
    with col2:
        st.subheader("‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß‡∏ï‡∏£‡∏ß‡∏à")
        appointment_date = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢")
        patients = db.get_patients()
        patient_options = {p.name: p.id for p in patients}
        patient_name = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢", list(patient_options.keys()))
        appointment_type = st.selectbox(
            "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à",
            ["‡∏ï‡∏£‡∏ß‡∏à‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ", "‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏≤‡∏á", "‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏•", "‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô"]
        )
        
        if st.button("‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß"):
            try:
                db.add_appointment(
                    date=appointment_date,
                    patient_id=patient_options[patient_name],
                    type=appointment_type
                )
                st.success("‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            except Exception as e:
                st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")

elif menu == "‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à":
    st.header("üî¨ ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à")
    
    col1, col2 = st.columns(2)
    with col1:
        st.subheader("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à")
        patients = db.get_patients()
        patient_options = {p.name: p.id for p in patients}
        patient_name = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢", list(patient_options.keys()))
        pressure = st.number_input("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï", 90, 200, 120)
        sugar = st.number_input("‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•", 70, 200, 100)
        cholesterol = st.number_input("‡∏Ñ‡∏≠‡πÄ‡∏•‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡∏≠‡∏•", 100, 300, 200)
        
        if st.button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•"):
            try:
                db.add_health_record(
                    patient_id=patient_options[patient_name],
                    date=datetime.now().date(),
                    blood_pressure=pressure,
                    blood_sugar=sugar,
                    cholesterol=cholesterol
                )
                st.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            except Exception as e:
                st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
    
    with col2:
        st.subheader("‡∏Å‡∏£‡∏≤‡∏ü‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏•")
        if patient_name:
            records = db.get_health_records(patient_options[patient_name])
            if records:
                records_df = pd.DataFrame([
                    {
                        "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà": r.date,
                        "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô": r.blood_pressure,
                        "‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•": r.blood_sugar,
                        "‡∏Ñ‡∏≠‡πÄ‡∏•‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡∏≠‡∏•": r.cholesterol
                    }
                    for r in records
                ])
                
                metric = st.selectbox(
                    "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π",
                    ["‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô", "‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•", "‡∏Ñ‡∏≠‡πÄ‡∏•‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡∏≠‡∏•"]
                )
                
                fig = px.line(
                    records_df,
                    x="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà",
                    y=metric,
                    title=f"‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ñ‡πà‡∏≤{metric}"
                )
                st.plotly_chart(fig)
            else:
                st.info("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à")

elif menu == "‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô":
    st.header("üìä ‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô")
    
    tab1, tab2, tab3 = st.tabs(["‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢", "‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢", "‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à"])
    
    with tab1:
        patients = db.get_patients()
        if patients:
            patients_df = pd.DataFrame([
                {
                    "‡πÄ‡∏û‡∏®": p.gender.value,
                    "‡πÇ‡∏£‡∏Ñ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß": p.conditions
                }
                for p in patients
            ])
            
            col1, col2 = st.columns(2)
            with col1:
                st.subheader("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ï‡∏≤‡∏°‡πÄ‡∏û‡∏®")
                fig = px.pie(
                    patients_df,
                    names="‡πÄ‡∏û‡∏®",
                    title="‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ï‡∏≤‡∏°‡πÄ‡∏û‡∏®"
                )
                st.plotly_chart(fig)
            
            with col2:
                st.subheader("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ï‡∏≤‡∏°‡πÇ‡∏£‡∏Ñ")
                disease_counts = pd.Series([
                    disease.strip()
                    for conditions in patients_df["‡πÇ‡∏£‡∏Ñ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß"]
                    for disease in conditions.split(",")
                    if disease.strip()
                ]).value_counts()
                
                fig = px.bar(
                    disease_counts,
                    title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ï‡∏≤‡∏°‡πÇ‡∏£‡∏Ñ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß"
                )
                st.plotly_chart(fig)
        else:
            st.info("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢")
    
    with tab2:
        appointments = db.get_appointments()
        if appointments:
            appointments_df = pd.DataFrame([
                {
                    "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó": a.type.value,
                    "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞": a.status.value
                }
                for a in appointments
            ])
            
            st.subheader("‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢")
            fig = px.histogram(
                appointments_df,
                x="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó",
                color="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞",
                title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"
            )
            st.plotly_chart(fig)
        else:
            st.info("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢")
    
    with tab3:
        records = db.get_health_records()
        if records:
            records_df = pd.DataFrame([
                {
                    "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà": r.date,
                    "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô": r.blood_pressure,
                    "‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•": r.blood_sugar,
                    "‡∏Ñ‡∏≠‡πÄ‡∏•‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡∏≠‡∏•": r.cholesterol
                }
                for r in records
            ])
            
            st.subheader("‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à")
            fig = px.line(
                records_df,
                x="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà",
                y=["‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô", "‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•", "‡∏Ñ‡∏≠‡πÄ‡∏•‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡∏≠‡∏•"],
                title="‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Ñ‡πà‡∏≤‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°"
            )
            st.plotly_chart(fig)
        else:
            st.info("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à")

elif menu == "‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö":
    st.header("‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö")
    
    tab1, tab2 = st.tabs(["‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ", "‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•"])
    
    with tab1:
        st.subheader("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏•‡∏¥‡∏ô‡∏¥‡∏Å")
        clinic_name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏ô‡∏¥‡∏Å", "MediTech Clinic")
        address = st.text_area("‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà", "123 ‡∏ñ.‡∏™‡∏∏‡∏Ç‡∏∏‡∏°‡∏ß‡∏¥‡∏ó ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø 10110")
        phone = st.text_input("‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå", "02-123-4567")
        email = st.text_input("‡∏≠‡∏µ‡πÄ‡∏°‡∏•", "contact@meditech.com")
        
        st.subheader("‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô")
        st.checkbox("‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏≤‡∏á SMS", True)
        st.checkbox("‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏≤‡∏á Email", True)
        st.checkbox("‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏≤‡∏á LINE", True)
    
    with tab2:
        st.subheader("‡∏ò‡∏µ‡∏°")
        theme = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ò‡∏µ‡∏°", ["‡∏™‡∏ß‡πà‡∏≤‡∏á", "‡∏°‡∏∑‡∏î", "‡∏£‡∏∞‡∏ö‡∏ö"])
        primary_color = st.color_picker("‡∏™‡∏µ‡∏´‡∏•‡∏±‡∏Å", "#2196F3")
        
        st.subheader("‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•")
        st.slider("‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£", 12, 24, st.session_state.font_size)
        st.checkbox("‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏°‡∏ä‡∏±‡∏î‡∏™‡∏π‡∏á", False)
        st.checkbox("‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ Screen Reader", False)
        
        if st.button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤"):
            st.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")

# ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö
st.sidebar.markdown("---")
st.sidebar.subheader("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö")
col1, col2, col3 = st.sidebar.columns(3)

patients = db.get_patients()
appointments = db.get_appointments()
pending_appointments = [a for a in appointments if a.status == AppointmentStatus.PENDING]

col1.metric("‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", len(patients))
col2.metric(
    "‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ",
    len([a for a in appointments if a.date == datetime.now().date()])
)
col3.metric("‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£", len(pending_appointments)) 